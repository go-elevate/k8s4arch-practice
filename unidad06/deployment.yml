apiVersion: v1
kind: Namespace
metadata:
  name: hotels-microservices
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hotels-config-map
  namespace: hotels-microservices
data:
  DB_TABLE: "hotels"
---
apiVersion: v1
kind: Secret
metadata:
  name: hotels-secrets
  namespace: hotels-microservices
type: Opaque
data:
  DB_PATH: L2RiL2hvdGVscy5qc29u
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hotels-fullstack
  namespace: hotels-microservices
  labels:
    app: hotels-app
    type: multi-container
    env: production
    resources: limited
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  selector:
    matchLabels:
      app: hotels-app
      type: multi-container
      env: production
      resources: limited
  template:
    metadata:
      labels:
        app: hotels-app
        type: multi-container
        env: production
        resources: limited
    spec:
      initContainers:
        - name: hotels-migrations
          image: ghcr.io/go-elevate/k8s4arch-hotels-backend:slim
          command: ["python", "migrations.py"]
          volumeMounts:
            - name: database
              mountPath: /db
          envFrom:
            - secretRef:
                name: hotels-secrets
            - configMapRef:
                name: hotels-config-map
      containers:
        - name: hotels-frontend
          image: ghcr.io/go-elevate/k8s4arch-hotels-frontend:slim
        - name: hotels-backend
          image: ghcr.io/go-elevate/k8s4arch-hotels-backend:slim
          ports:
            - containerPort: 5000
          volumeMounts:
            - name: database
              mountPath: /db
          envFrom:
            - secretRef:
                name: hotels-secrets
            - configMapRef:
                name: hotels-config-map
          resources:
            limits:
              cpu: "1"
              memory: "1500Mi"
            requests:
              cpu: "0.5"
              memory: "1000Mi"
          livenessProbe:
            httpGet:
              path: /status
              port: 5000
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /status
              port: 5000
            periodSeconds: 3
          startupProbe:
            httpGet:
              path: /status
              port: 5000
            failureThreshold: 20
            periodSeconds: 10
      volumes:
        - name: database
          emptyDir: {}
